###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Union, TypedDict, Type
from typing_extensions import NotRequired, Literal

import baml_py

from . import types
from .types import Checked, Check
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class AsyncHttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def Conversationalist(
        self,
        context: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "Conversationalist",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def FormatResponse(
        self,
        messages: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "FormatResponse",
        {
          "messages": messages,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def Navigate(
        self,
        agent: types.Agent,payload: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "Navigate",
        {
          "agent": agent,
          "payload": payload,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def ParseQuery(
        self,
        context: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ParseQuery",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def Respond(
        self,
        inputMessage: types.Payload,workers: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "Respond",
        {
          "inputMessage": inputMessage,
          "workers": workers,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def RetrieveSchema(
        self,
        user_query: str,db_schema: types.DBSchema,parsed_query: types.ParsedQuery,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "RetrieveSchema",
        {
          "user_query": user_query,
          "db_schema": db_schema,
          "parsed_query": parsed_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def SummarizeData(
        self,
        inputMessage: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "SummarizeData",
        {
          "inputMessage": inputMessage,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def Supervise(
        self,
        Messages: types.Payload,workers: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "Supervise",
        {
          "Messages": Messages,
          "workers": workers,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def ValidateResponse(
        self,
        inputMessage: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ValidateResponse",
        {
          "inputMessage": inputMessage,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    


class AsyncHttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def Conversationalist(
        self,
        context: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "Conversationalist",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def FormatResponse(
        self,
        messages: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "FormatResponse",
        {
          "messages": messages,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def Navigate(
        self,
        agent: types.Agent,payload: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "Navigate",
        {
          "agent": agent,
          "payload": payload,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def ParseQuery(
        self,
        context: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ParseQuery",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def Respond(
        self,
        inputMessage: types.Payload,workers: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "Respond",
        {
          "inputMessage": inputMessage,
          "workers": workers,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def RetrieveSchema(
        self,
        user_query: str,db_schema: types.DBSchema,parsed_query: types.ParsedQuery,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "RetrieveSchema",
        {
          "user_query": user_query,
          "db_schema": db_schema,
          "parsed_query": parsed_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def SummarizeData(
        self,
        inputMessage: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "SummarizeData",
        {
          "inputMessage": inputMessage,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def Supervise(
        self,
        Messages: types.Payload,workers: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "Supervise",
        {
          "Messages": Messages,
          "workers": workers,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def ValidateResponse(
        self,
        inputMessage: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ValidateResponse",
        {
          "inputMessage": inputMessage,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    


__all__ = ["AsyncHttpRequest", "AsyncHttpStreamRequest"]