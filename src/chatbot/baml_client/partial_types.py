###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Agent(BaseModel):
    agent: Optional[str] = None
    role: Optional[str] = None
    toolbox: Optional[Dict[str, Optional["ToolMetadata"]]] = None

class ChatResponse(BaseModel):
    name: Optional[str] = None
    retrieve_info: Optional[bool] = None
    response: Optional[str] = None
    user_query: Optional[str] = None
    justification: Optional[str] = None

class Column(BaseModel):
    name: Optional[str] = None
    type: Optional[str] = None
    nullable: Optional[bool] = None
    default: Optional[str] = None
    json_keys: Optional[List[str]] = None

class DBSchema(BaseModel):
    tables: List["Table"]

class DataSummarizer(BaseModel):
    summary: Optional[str] = None
    explanation: Optional[str] = None
    justification: Optional[str] = None

class Messages(BaseModel):
    name: Optional[str] = None
    message: Optional[str] = None
    role: Optional[str] = None

class Metadata(BaseModel):
    model_config = ConfigDict(extra='allow')
    Link_PrimaryData: Optional[str] = None
    Name: Optional[Union[Optional[str], Optional[int]]] = None
    UID: Optional[str] = None

class Navigator(BaseModel):
    agent: Optional["Agent"] = None
    explanation: Optional[str] = None
    next_tool: Optional[str] = None
    tool_args: Optional["ToolArgs"] = None
    justification: Optional[str] = None

class ParsedQuery(BaseModel):
    uid: Optional[Union[Optional[List[str]], str]] = None
    sampletype: Optional[Union[Optional[List[str]], str]] = None
    assay: Optional[Union[Optional[List[str]], str]] = None
    attribute: Optional[Union[Optional[List[str]], str]] = None
    terms: Optional[Union[Optional[List[str]], str]] = None

class Payload(BaseModel):
    user_query: Optional[str] = None
    aggregatedMessages: List["Messages"]
    resource: Optional["ResourceBox"] = None
    last_worker: Optional[str] = None

class QueryParser(BaseModel):
    parsed_query: Optional["ParsedQuery"] = None
    explanation: Optional[str] = None
    justification: Optional[str] = None

class ResourceBox(BaseModel):
    sample_metadata: Optional[Union[Optional["Metadata"], Union[Optional[List["Metadata"]], str]]] = None
    protocolURL: Optional[str] = None
    sampleURL: Optional[str] = None
    UIDs: Optional[List[str]] = None
    db_schema: Optional["DBSchema"] = None
    parsed_query: Optional["ParsedQuery"] = None
    st_attributes: Optional[Union[Optional[List["SampleTypeAttributes"]], "SampleTypeAttributes"]] = None
    update_info: Optional["UpdatePipelineMetadata"] = None

class Responder(BaseModel):
    Next_worker: Optional["Agent"] = None
    explanation: Optional[str] = None
    justification: Optional[str] = None

class ResponseFormatter(BaseModel):
    formattedResponse: Optional[str] = None
    name: Optional[str] = None
    explanation: Optional[str] = None
    justification: Optional[str] = None

class SampleTypeAttributes(BaseModel):
    sampletype: Optional[str] = None
    st_description: Optional[str] = None
    attributes: List[str]

class SchemaMapper(BaseModel):
    name: Optional[str] = None
    relevant_keys: List[str]
    schema_map: Optional["DBSchema"] = None
    justification: Optional[str] = None
    explanation: Optional[str] = None

class Supervisor(BaseModel):
    Next_worker: Optional["Agent"] = None
    explanation: Optional[str] = None
    justification: Optional[str] = None

class Table(BaseModel):
    name: Optional[str] = None
    columns: List["Column"]

class ToolArgs(BaseModel):
    json_keys: Optional[Union[Optional[str], Optional[List[str]]]] = None
    terms: Optional[List[str]] = None
    uid: Optional[Union[Optional[str], Optional[List[str]]]] = None
    sample_type: Optional[List[str]] = None

class ToolMetadata(BaseModel):
    doc: Optional[str] = None
    signature: Optional[str] = None

class UpdatePipelineMetadata(BaseModel):
    success: Optional[bool] = None
    logs: List[str]
    errors: Optional[List[str]] = None
    stats: Optional[Dict[str, Optional[int]]] = None

class Validator(BaseModel):
    name: Optional[str] = None
    explanation: Optional[str] = None
    Valid: Optional[bool] = None
    response: Optional[str] = None
    error: Optional[str] = None
    Clarifying_Question: Optional[str] = None
    justification: Optional[str] = None
