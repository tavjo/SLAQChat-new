###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Agent(BaseModel):
    agent: str
    role: str
    toolbox: Optional[Dict[str, "ToolMetadata"]] = None

class ChatResponse(BaseModel):
    name: str
    retrieve_info: bool
    response: Optional[str] = None
    user_query: str
    justification: str

class Column(BaseModel):
    name: str
    type: str
    nullable: bool
    default: Optional[str] = None
    json_keys: Optional[List[str]] = None

class DBSchema(BaseModel):
    tables: List["Table"]

class DataSummarizer(BaseModel):
    summary: str
    explanation: str
    justification: str

class Messages(BaseModel):
    name: str
    message: str
    role: str

class Metadata(BaseModel):
    model_config = ConfigDict(extra='allow')
    Link_PrimaryData: Optional[str] = None
    Name: Union[Optional[str], Optional[int]] = None
    UID: str

class Navigator(BaseModel):
    agent: "Agent"
    explanation: str
    next_tool: str
    tool_args: "ToolArgs"
    justification: str

class ParsedQuery(BaseModel):
    uid: Union[Optional[List[str]], str] = None
    sampletype: Union[Optional[List[str]], str] = None
    assay: Union[Optional[List[str]], str] = None
    attribute: Union[Optional[List[str]], str] = None
    terms: Union[Optional[List[str]], str] = None

class Payload(BaseModel):
    user_query: str
    aggregatedMessages: List["Messages"]
    resource: Optional["ResourceBox"] = None
    last_worker: str

class QueryParser(BaseModel):
    parsed_query: "ParsedQuery"
    explanation: str
    justification: str

class ResourceBox(BaseModel):
    sample_metadata: Union[Optional["Metadata"], Union[Optional[List["Metadata"]], str]] = None
    protocolURL: Optional[str] = None
    sampleURL: Optional[str] = None
    UIDs: Optional[List[str]] = None
    db_schema: Optional["DBSchema"] = None
    parsed_query: Optional["ParsedQuery"] = None
    st_attributes: Union[Optional[List["SampleTypeAttributes"]], "SampleTypeAttributes"] = None
    update_info: Optional["UpdatePipelineMetadata"] = None

class Responder(BaseModel):
    Next_worker: "Agent"
    explanation: str
    justification: str

class ResponseFormatter(BaseModel):
    formattedResponse: str
    name: str
    explanation: str
    justification: str

class SampleTypeAttributes(BaseModel):
    sampletype: str
    st_description: str
    attributes: List[str]

class SchemaMapper(BaseModel):
    name: str
    relevant_keys: List[str]
    schema_map: "DBSchema"
    justification: str
    explanation: str

class Supervisor(BaseModel):
    Next_worker: "Agent"
    explanation: str
    justification: str

class Table(BaseModel):
    name: str
    columns: List["Column"]

class ToolArgs(BaseModel):
    json_keys: Union[Optional[str], Optional[List[str]]] = None
    terms: Optional[List[str]] = None
    uid: Union[Optional[str], Optional[List[str]]] = None
    sample_type: Optional[List[str]] = None

class ToolMetadata(BaseModel):
    doc: str
    signature: str

class UpdatePipelineMetadata(BaseModel):
    success: bool
    logs: List[str]
    errors: Optional[List[str]] = None
    stats: Optional[Dict[str, int]] = None

class Validator(BaseModel):
    name: str
    explanation: str
    Valid: bool
    response: Optional[str] = None
    error: Optional[str] = None
    Clarifying_Question: Optional[str] = None
    justification: str
