###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, TypeVar, Union, TypedDict, Type, Literal, cast
from typing_extensions import NotRequired
import pprint

import baml_py
from pydantic import BaseModel, ValidationError, create_model

from . import partial_types, types
from .types import Checked, Check
from .type_builder import TypeBuilder
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME

OutputType = TypeVar('OutputType')

# Define the TypedDict with optional parameters having default values
class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]

class BamlSyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager)

    @property
    def stream(self):
      return self.__stream_client

    
    def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Resume:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.call_function_sync(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.Resume, raw.cast_to(types, types, partial_types, False))
    
    def FormatResponse(
        self,
        user_query: str,inputMessage: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ResponseFormatter:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.call_function_sync(
        "FormatResponse",
        {
          "user_query": user_query,"inputMessage": inputMessage,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.ResponseFormatter, raw.cast_to(types, types, partial_types, False))
    
    def Respond(
        self,
        inputMessage: str,workers: Dict[str, str],user_query: str,prev_worker: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Responder:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.call_function_sync(
        "Respond",
        {
          "inputMessage": inputMessage,"workers": workers,"user_query": user_query,"prev_worker": prev_worker,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.Responder, raw.cast_to(types, types, partial_types, False))
    
    def SummarizeData(
        self,
        inputMessage: str,user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> types.DataSummarizer:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.call_function_sync(
        "SummarizeData",
        {
          "inputMessage": inputMessage,"user_query": user_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.DataSummarizer, raw.cast_to(types, types, partial_types, False))
    
    def Supervise(
        self,
        Messages: str,workers: Dict[str, str],
        baml_options: BamlCallOptions = {},
    ) -> types.Supervisor:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.call_function_sync(
        "Supervise",
        {
          "Messages": Messages,"workers": workers,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.Supervisor, raw.cast_to(types, types, partial_types, False))
    
    def ValidateResponse(
        self,
        user_query: str,response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Validator:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.call_function_sync(
        "ValidateResponse",
        {
          "user_query": user_query,"response": response,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )
      return cast(types.Validator, raw.cast_to(types, types, partial_types, False))
    



class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Resume, types.Resume]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function_sync(
        "ExtractResume",
        {
          "resume": resume,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlSyncStream[partial_types.Resume, types.Resume](
        raw,
        lambda x: cast(partial_types.Resume, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Resume, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def FormatResponse(
        self,
        user_query: str,inputMessage: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.ResponseFormatter, types.ResponseFormatter]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function_sync(
        "FormatResponse",
        {
          "user_query": user_query,
          "inputMessage": inputMessage,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlSyncStream[partial_types.ResponseFormatter, types.ResponseFormatter](
        raw,
        lambda x: cast(partial_types.ResponseFormatter, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ResponseFormatter, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def Respond(
        self,
        inputMessage: str,workers: Dict[str, str],user_query: str,prev_worker: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Responder, types.Responder]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function_sync(
        "Respond",
        {
          "inputMessage": inputMessage,
          "workers": workers,
          "user_query": user_query,
          "prev_worker": prev_worker,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlSyncStream[partial_types.Responder, types.Responder](
        raw,
        lambda x: cast(partial_types.Responder, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Responder, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def SummarizeData(
        self,
        inputMessage: str,user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.DataSummarizer, types.DataSummarizer]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function_sync(
        "SummarizeData",
        {
          "inputMessage": inputMessage,
          "user_query": user_query,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlSyncStream[partial_types.DataSummarizer, types.DataSummarizer](
        raw,
        lambda x: cast(partial_types.DataSummarizer, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.DataSummarizer, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def Supervise(
        self,
        Messages: str,workers: Dict[str, str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Supervisor, types.Supervisor]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function_sync(
        "Supervise",
        {
          "Messages": Messages,
          "workers": workers,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlSyncStream[partial_types.Supervisor, types.Supervisor](
        raw,
        lambda x: cast(partial_types.Supervisor, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Supervisor, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ValidateResponse(
        self,
        user_query: str,response: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Validator, types.Validator]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      raw = self.__runtime.stream_function_sync(
        "ValidateResponse",
        {
          "user_query": user_query,
          "response": response,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return baml_py.BamlSyncStream[partial_types.Validator, types.Validator](
        raw,
        lambda x: cast(partial_types.Validator, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Validator, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    

b = BamlSyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b"]