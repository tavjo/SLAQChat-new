###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, TypeVar, Union, TypedDict, Type, Literal, cast
from typing_extensions import NotRequired
import pprint

import baml_py
from pydantic import BaseModel, ValidationError, create_model

from . import partial_types, types
from .types import Checked, Check
from .type_builder import TypeBuilder
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
from .sync_request import HttpRequest, HttpStreamRequest
from .parser import LlmResponseParser, LlmStreamParser

OutputType = TypeVar('OutputType')


# Define the TypedDict with optional parameters having default values
class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]
    collector: NotRequired[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]]


class BamlSyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"
    __http_request: "HttpRequest"
    __http_stream_request: "HttpStreamRequest"
    __llm_response_parser: LlmResponseParser
    __baml_options: BamlCallOptions

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager, baml_options)
      self.__http_request = HttpRequest(self.__runtime, self.__ctx_manager)
      self.__http_stream_request = HttpStreamRequest(self.__runtime, self.__ctx_manager)
      self.__llm_response_parser = LlmResponseParser(self.__runtime, self.__ctx_manager)
      self.__llm_stream_parser = LlmStreamParser(self.__runtime, self.__ctx_manager)
      self.__baml_options = baml_options or {}

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser

    def with_options(
      self,
      tb: Optional[TypeBuilder] = None,
      client_registry: Optional[baml_py.baml_py.ClientRegistry] = None,
      collector: Optional[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]] = None,
    ) -> "BamlSyncClient":
      """
      Returns a new instance of BamlSyncClient with explicitly typed baml options
      for Python 3.8 compatibility.
      """
      new_options: BamlCallOptions = self.__baml_options.copy()

      # Override if any keyword arguments were provided.
      if tb is not None:
          new_options["tb"] = tb
      if client_registry is not None:
          new_options["client_registry"] = client_registry
      if collector is not None:
          new_options["collector"] = collector
      return BamlSyncClient(self.__runtime, self.__ctx_manager, new_options)

    
    def Conversationalist(
        self,
        context: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> types.ChatResponse:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "Conversationalist",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.ChatResponse, raw.cast_to(types, types, partial_types, False))
    
    def FormatResponse(
        self,
        messages: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> types.ResponseFormatter:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "FormatResponse",
        {
          "messages": messages,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.ResponseFormatter, raw.cast_to(types, types, partial_types, False))
    
    def Navigate(
        self,
        agent: types.Agent,payload: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> types.Navigator:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "Navigate",
        {
          "agent": agent,"payload": payload,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Navigator, raw.cast_to(types, types, partial_types, False))
    
    def ParseQuery(
        self,
        context: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> types.QueryParser:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ParseQuery",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.QueryParser, raw.cast_to(types, types, partial_types, False))
    
    def Respond(
        self,
        inputMessage: types.Payload,workers: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> types.Responder:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "Respond",
        {
          "inputMessage": inputMessage,"workers": workers,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Responder, raw.cast_to(types, types, partial_types, False))
    
    def RetrieveSchema(
        self,
        user_query: str,db_schema: types.DBSchema,parsed_query: types.ParsedQuery,
        baml_options: BamlCallOptions = {},
    ) -> types.SchemaMapper:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "RetrieveSchema",
        {
          "user_query": user_query,"db_schema": db_schema,"parsed_query": parsed_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.SchemaMapper, raw.cast_to(types, types, partial_types, False))
    
    def SummarizeData(
        self,
        inputMessage: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> types.DataSummarizer:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "SummarizeData",
        {
          "inputMessage": inputMessage,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.DataSummarizer, raw.cast_to(types, types, partial_types, False))
    
    def Supervise(
        self,
        Messages: types.Payload,workers: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> types.Supervisor:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "Supervise",
        {
          "Messages": Messages,"workers": workers,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Supervisor, raw.cast_to(types, types, partial_types, False))
    
    def ValidateResponse(
        self,
        inputMessage: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> types.Validator:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ValidateResponse",
        {
          "inputMessage": inputMessage,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Validator, raw.cast_to(types, types, partial_types, False))
    



class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __baml_options: BamlCallOptions
    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__baml_options = baml_options or {}

    
    def Conversationalist(
        self,
        context: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.ChatResponse, types.ChatResponse]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "Conversationalist",
        {
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.ChatResponse, types.ChatResponse](
        raw,
        lambda x: cast(partial_types.ChatResponse, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ChatResponse, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def FormatResponse(
        self,
        messages: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.ResponseFormatter, types.ResponseFormatter]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "FormatResponse",
        {
          "messages": messages,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.ResponseFormatter, types.ResponseFormatter](
        raw,
        lambda x: cast(partial_types.ResponseFormatter, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ResponseFormatter, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def Navigate(
        self,
        agent: types.Agent,payload: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Navigator, types.Navigator]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "Navigate",
        {
          "agent": agent,
          "payload": payload,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.Navigator, types.Navigator](
        raw,
        lambda x: cast(partial_types.Navigator, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Navigator, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ParseQuery(
        self,
        context: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.QueryParser, types.QueryParser]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ParseQuery",
        {
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.QueryParser, types.QueryParser](
        raw,
        lambda x: cast(partial_types.QueryParser, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.QueryParser, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def Respond(
        self,
        inputMessage: types.Payload,workers: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Responder, types.Responder]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "Respond",
        {
          "inputMessage": inputMessage,
          "workers": workers,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.Responder, types.Responder](
        raw,
        lambda x: cast(partial_types.Responder, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Responder, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def RetrieveSchema(
        self,
        user_query: str,db_schema: types.DBSchema,parsed_query: types.ParsedQuery,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.SchemaMapper, types.SchemaMapper]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "RetrieveSchema",
        {
          "user_query": user_query,
          "db_schema": db_schema,
          "parsed_query": parsed_query,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.SchemaMapper, types.SchemaMapper](
        raw,
        lambda x: cast(partial_types.SchemaMapper, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.SchemaMapper, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def SummarizeData(
        self,
        inputMessage: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.DataSummarizer, types.DataSummarizer]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "SummarizeData",
        {
          "inputMessage": inputMessage,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.DataSummarizer, types.DataSummarizer](
        raw,
        lambda x: cast(partial_types.DataSummarizer, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.DataSummarizer, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def Supervise(
        self,
        Messages: types.Payload,workers: List[types.Agent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Supervisor, types.Supervisor]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "Supervise",
        {
          "Messages": Messages,
          "workers": workers,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.Supervisor, types.Supervisor](
        raw,
        lambda x: cast(partial_types.Supervisor, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Supervisor, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ValidateResponse(
        self,
        inputMessage: types.Payload,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Validator, types.Validator]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ValidateResponse",
        {
          "inputMessage": inputMessage,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.Validator, types.Validator](
        raw,
        lambda x: cast(partial_types.Validator, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Validator, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    


b = BamlSyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b"]