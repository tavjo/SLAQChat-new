###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> MyClient {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o-mini\"\n    temperature 0.2\n  }\n}\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "conversationalist.baml": "class ChatResponse {\n    name string @description(\"The name of the current worker : conversationalist\")\n    retrieve_info bool @description(\"Whether to retrieve information from the database\")\n    response string? @description(\"The response to the user's query only if retrieve_info is false\")\n    user_query string @description(\"The user's query\")\n    justification string @description(\"The justification for the response\")\n}\n\nclient<llm> ConversationalistClient {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o\"\n    temperature 0.4\n  }\n}\n\nfunction Conversationalist(user_query: string) -> ChatResponse {\n    client ConversationalistClient\n    prompt #\"\n        You are a helpful assistant tasked with answering user questions about a **data management** platform called NExtSEEK for **scientific research**.\n        Examine the user message {{ user_query }} and determine if it is a question that requires information to be retrieved from the database.\n        If it is, set retrieve_info to true and return the user_query, your justification, and the response should be null.\n        If it is not, set retrieve_info to false and return the user_query, your justification, and the response should be a friendly and helpful reply to the user's query.\n        Do not make up information. If you do not know the answer, set retrieve_info to 'true' in order to start the process for retrieving information from the database.\n        \\nImportant: If the user's query is not related to NExtSEEK or data management, set retrieve_info to false and return the user_query, your justification, and the response should be a friendly reply to the user outlining your role. \n        {{ ctx.output_format }}\n    \"#\n}\n\ntest converse {\n    functions [Conversationalist]\n    args {\n        user_query #\"Hey! What's up?\"#\n    }\n}\n\ntest converse2 {\n    functions [Conversationalist]\n    args {\n        user_query #\"Hi! Where can I find the protocol for the sample NHP-220630FLY-15?\"#\n    }\n}\n\ntest converse3 {\n        functions [Conversationalist]\n    args {\n        user_query #\"Hi! Which country has the best food?\"#\n    }\n}\n\n\n\n\n",
    "data_summarizer.baml": "\nfunction SummarizeData(inputMessage: Payload) -> DataSummarizer {\n    client MyClient\n    prompt #\"\n    Analyze the conversation and create a concise but informative summary. Focus on:\n    1. Key points relevant to the user's query\n    2. Important details from available resources\n    3. Your summary should attempt to answer the user's query based on the information available\n    4. Never make up information, only use the information provided\n    5. Format your response as if addressing the user directly\n\n    {{ inputMessage }}\n    {{ ctx.output_format }}\n    \"#\n}\n\ntest BasicSummary {\n  functions [SummarizeData]\n  args {\n    inputMessage {\n      user_query \"Can you help me find protocols related to RNA extraction from blood samples?\"\n      system_message \"Lab assistant helping with protocol searches\"\n      aggregatedMessages [\"Can you help me find protocols related to RNA extraction from blood samples?\"]\n    }\n  }\n}\n\ntest ComplexSummary {\n  functions [SummarizeData]\n  args {\n    inputMessage {\n      user_query \"I need the protocol from sample MIT-123 and its metadata\"\n      system_message \"Lab protocol assistant\"\n      aggregatedMessages [\"I need the protocol from sample MIT-123 and its metadata\"]\n      resource {\n        sampleMetadata [\n          {\n            id \"MIT-123\"\n            type \"blood_sample\"\n          }\n        ]\n        protocolUrl \"https://protocols.mit.edu/123\"\n        sampleUrl \"https://nextseek.mit.edu/seek/sampletree/uid=MIT-123\"\n      }\n    }\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.78.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "models.baml": "class DataSummarizer {\n    summary string @description(\"The summary of the input message\")\n    messages Payload @description(\"The messages in the conversation\")\n    justification string @description(\"The justification for your response\")\n}\n\nclass ToolArgs {\n    key_string string? @description(\"json_metadata key\")\n    terms string[]? @description(\"terms to search for in the database\")\n    uid string?|string[]? @description(\"exact uid of each sample provided by the user\")\n    sample_type string?|string[]? @description(\"specific sample type(s) to pass to the tool\")\n}\n\nclass Navigator {\n    agent Agent @description(\"The current agent in the conversation\")\n    explanation string @description(\"The explanation for choosing the next tool and tool arguments (how)\")\n    next_tool string @description(\"The next tool to use from the agent's toolbox\")\n    tool_args ToolArgs @description(\"The arguments to pass to the tool\")\n    justification string @description(\"The justification for choosing the next tool (why)\")\n}\n\nclass Responder {\n    Next_worker Agent @description(\"The next worker to call\")\n    justification string @description(\"The justification for choosing the next worker\")\n}\n\nclass ResponseFormatter {\n    formattedResponse string @description(\"Formatted response for the user\")\n    name string @description(\"The name of the current worker : response_formatter\")\n    messages Payload @description(\"Conversation history and context\")\n    justification string @description(\"The justification for your response\")\n}\n\nclass Supervisor {\n    Next_worker Agent @description(\"The next worker to call\")\n    justification string @description(\"The justification for choosing the next worker\")\n}\n\nclass Metadata {\n    AntibodyParent string?\n    BioSampleAccession string?\n    BiosafetyLevel string?\n    Catalog string?\n    CellCount string?\n    CellLine string?\n    CellLineage string?\n    Checksum_PrimaryData string?\n    Checksum_PrimaryType string?\n    Cohort string?\n    CompensationFCSParent string?\n    Concentration string?\n    ConcentrationUnits string?\n    File_PrimaryData string?\n    Fixation string?\n    Fixative string?\n    FlowAmount string?\n    FlowAmountUnits string?\n    FMO string?\n    Genotype string?\n    Instrument string?\n    InstrumentUser string?\n    Link_PrimaryData string?\n    Media string?\n    Name string?\n    Notes string?\n    Parent string?\n    PassageNum string?\n    Path_PrimaryData string?\n    Phenotype string?\n    Protocol string?\n    Protocol_Stimulation string?\n    Protocol_Treatment string?\n    Publish_uri string?\n    QC string?\n    QC_notes string?\n    ReagenCatalogNum string?\n    Reagent string?\n    ReagentBrand string?\n    ReagentManufacturer string?\n    Reference string?\n    Repository string?\n    RepositoryID string?\n    Scientist string?\n    SEEKSubmissionDate string?\n    SampleCreationDate string?\n    Software string?\n    Source string?\n    SourceFacility string?\n    Species string?\n    Stain string?\n    StorageLocation string?\n    StorageSite string?\n    StorageTemperature string?\n    StorageTemperatureUnits string?\n    StorageType string?\n    Stimulation string?\n    Study string?\n    Timepoint string?\n    TotalProtein string?\n    TotalProteinUnits string?\n    Treatment1 string?\n    Treatment1Dose string?\n    Treatment1DoseUnits string?\n    Treatment1Reference string?\n    Treatment2 string?\n    Treatment2Dose string?\n    Treatment2DoseUnits string?\n    Treatment2Reference string?\n    TreatmentDoseTime string?\n    TreatmentRoute string?\n    TreatmentTimeUnits string?\n    TreatmentType string?\n    Type string?\n    UID string?\n    ValidationMethod string?\n    ValidationQuality string?\n    Vendor string?\n}\n\nclass Payload {\n    system_message string @description(\"The system message\")\n    user_query string @description(\"The user message\")\n    aggregatedMessages string[]? @description(\"The aggregated messages in the conversation\")\n    resource ResourceBox? @description(\"The resources available to the agent\")\n}\n\nclass Agent {\n    agent string @description(\"The name of the agent\")\n    role string @description(\"The role of the agent\")\n    toolbox map<string, ToolMetadata>? @description(\"The toolbox of the agent\")\n}\n\nclass Validator {\n    name string @description(\"The name of the current agent : validator\")\n    Valid bool @description(\"Whether the response is valid\")\n    Clarifying_Question string? @description(\"A clarifying question to the user if Valid is false\")\n    justification string @description(\"The justification for your response\")\n    response string? @description(\"same as inputMessage\")\n    error string? @description(\"The error message if the response contains an error\")\n}\n\nclass ToolMetadata {\n    doc string @description(\"The documentation of the tool\")\n    signature string @description(\"The signature of the tool\")\n}\n\nclass Table {\n    name string @description(\"The name of the table\")\n    columns Column[] @description(\"The columns in the table\")\n}\n\nclass Column {\n    name string @description(\"The name of the column\")\n    type string @description(\"The type of the column\")\n    nullable bool @description(\"Whether the column can be null\")\n    default string? @description(\"The default value of the column\")\n    json_keys string[]? @description(\"The keys in the JSON column\")\n}\n\nclass DBSchema {\n    tables Table[] @description(\"The relevant tables in the database\")\n}\n\nclass SchemaMapper {\n    name string @description(\"The name of the agent: schema_mapper\")\n    relevant_keys string[] @description(\"The relevant keys in the database\")\n    schema_map DBSchema @description(\"The mapped schema of the database based on the user query\")\n    justification string @description(\"The justification for the mapping and proposed query\")\n    explanation string @description(\"The explanation for the mapping\")\n}\n\nclass SampleTypeAttributes {\n    sampletype string @description(\"The sample type i.e. MUS, TIS, CEL\")\n    st_description string @description(\"The description of the sample type\")\n    attributes string[] @description(\"The attributes of the sample type\")\n}\n\nclass UpdatePipelineMetadata{\n    success bool @description(\"Whether the update was successful\")\n    logs string[] @description(\"The logs from running the update pipeline\")\n    errors string[]? @description(\"The errors from running the update pipeline\")\n    stats map<string, int>? @description(\"The stats from running the update pipeline\")\n}\n\nclass ResourceBox {\n    sample_metadata Metadata? | Metadata[]? | string? @description(\"Sample metadata\")\n    protocolURL string? @description(\"Protocol download URL i.e.: https://nextseek.mit.edu/seek/sop/uid=<protocol_uid>\")\n    sampleURL string? @description(\"Sample URL i.e.: https://nextseek.mit.edu/seek/sampletree/uid=<sample_uid>\")\n    UIDs string[]? @description(\"List of UIDs\")\n    db_schema DBSchema? @description(\"A complete or partial schema of the database\")\n    parsed_query ParsedQuery? @description(\"The parsed user query\")\n    st_attributes SampleTypeAttributes[]? | SampleTypeAttributes? @description(\"The sample type attributes\")\n    update_info UpdatePipelineMetadata? @description(\"The update information\")\n}\n\nclass ParsedQuery {\n    uid string[]? | string? @description(\"extracted UIDs of the samples from the user query\")\n    sampletype string[]? | string? @description(\"extracted sample type from the user query i.e. mouse, tissue, cell line etc.\")\n    assay string[]? | string? @description(\"extracted assay from the user query i.e. flow cytometry, sequencing, etc.\")\n    attribute string[]? | string? @description(\"extracted attribute from the user query i.e. genotype, treatment, species, etc.\")\n    terms string[]? | string? @description(\"extracted terms from the user query associated with a specific attribute i.e. 'rituximab' for treatment \")\n}",
    "navigator.baml": "\nclient<llm> NavClient {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o\"\n    temperature 0\n  }\n}\n\nfunction Navigate(agent: Agent, payload: Payload) -> Navigator {\n    client NavClient\n    prompt #\"\n    You are a navigation system that determines the next appropriate tool to use from an agent's toolbox.\n\n    Instructions:\n    1. Analyze the user query {{ payload.user_query }} and conversation context\n    2. Select a tool from the agent's toolbox that best addresses the user query\n    3. Format tool arguments precisely based on the tool's requirements\n    4. Provide clear justification for your tool selection\n    5. Do not return a tool if none appear suitable to answer the user query. Instead return an empty string for the tool name and an empty list for the tool arguments.\n    6. You must carefully assess the metadadata on the tool selected to ensure that the arguments provided are valid. \n    7. Also, when providing the tool arguments, use the mapped database schema in {{ payload.resource }} to determine the exact database terms to pass in. \n    8. Do not make assumptions about the database schema. Only use the mapped schema in {{ payload.resource }}.\n\n    Constraints:\n    - The tool name must exactly match one in the agent's toolbox\n    - Tool arguments should be specific and actionable\n    - If no suitable tool exists, explain why in the justification\n    - Only return the values for the tool arguments \n\n    - Conversation Context:\n    {{ payload }}\n    {{ ctx.output_format }}\n\n    {{ _.role(\"system\") }}\n    Current agent state and available tools:\n    \n    Agent Information:\n    {{ agent }}\n\n    Agent Toolbox:\n    {{ agent.toolbox }}\n  \"#\n}\n\ntest navigator {\n    functions [Navigate]\n    args {\n        agent {\n            agent \"basic_sample_info_retriever\"\n            role \"retrieves basic sample metadata\"\n            messages {\n                system_message #\"You are a helpful assistant that is tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                user_query #\"What is the weather today?\"#\n                aggredatedMessages [#\"Can you tell me a little about the sample NHP-220630FLY-15?\"#]\n            }\n            resource {\n            }\n            toolbox [\"get_sample_name\", \"retrieve_sample_info\"]\n            tools_description {\n            \"get_sample_name\" #\"Get the name of the sample.\\nArgs:\\nsample_metadata (list): A list of dictionaries containing sample metadata.\\nReturns: str: The name of the sample.\"#\n            \"retrieve_sample_info\" #\"Retrieve the sample information for a given sample UID.\\nArgs:\\nuid (str): The UID of the sample.\\nReturns:\\nList[dict] | None: A list containing the metadata dictionary for the sample or None if an error occurred.\"#\n        }\n    }\n    }\n}\n",
    "query_parser.baml": "class QueryParser {\n    parsed_query ParsedQuery @description(\"Parsed user query\")\n    // tasks string[] @description(\"List of tasks to be performed\")\n    explanation string @description(\"Explanation of your reasoning (how you arrived at the parsed query)\")\n    justification string @description(\"The justification for your reasoning (why you chose the parsed query)\")\n}\n\nclient<llm> ParseQueryClient {\n    provider \"openai\"\n    options {\n        api_key env.OPENAI_API_KEY\n        model \"gpt-4o\"\n        temperature 0\n    }\n}\nfunction ParseQuery(context: Payload) -> QueryParser {\n    client ParseQueryClient\n    prompt  #\"\n    You are a query parser that breaks down complex user queries {{ context.user_query }} into atomic parts.\n    Your goal is to create a clear and structured version of the user query.\n\n    Example:\n    User: \"Please list all samples with genotype ''RaDR+/+; GPT+/+; Aag -/-'?\"\n    Parsed query would be:\n    {\n        \"attribute\" \"genotype\",\n        \"terms\" \"RaDR+/+; GPT+/+; Aag -/-\"\n    }\n\n    If you are unsure about the tasks, you can ask the user for clarification by returning a question as the parsed_query and justification as \"I am unsure about the tasks. Please clarify your query.\"\n\n    {{ context }}\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest SimpleQueryParse {\n  functions [ParseQuery]\n  args {\n    user_query \"What's the weather like in Paris and should I pack an umbrella?\"\n  }\n}\n\ntest ComplexQueryParse {\n  functions [ParseQuery]\n  args {\n    user_query \"What is the link to the sample page for the parent sample of sample 1099?\"\n  }\n}",
    "responder.baml": "// Create a function to respond to the user's query.\nfunction Respond(inputMessage: Payload, workers: Agent[]) -> Responder {\n    client MyClient\n      prompt  #\"\n    You are a workflow coordinator selecting the next appropriate worker to handle this conversation.\n\n    Worker Selection Rules:\n    1. Workers must be used in this sequence: {{ workers }}\n    2. Workers must be used in the order of the list \n    3. Workers with 'optional' in name should only be used when necessary\n    4. Never repeat a worker\n    5. Choose based on the current conversation state and needs\n    6. If an error occurred in a previous worker, summarize the error and return the next worker.\n\n    Selection Process:\n    - Analyze the current conversation stage\n    - Check if optional workers are needed\n    - Verify if validation is complete\n    - Provide clear justification for your choice\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"system\") }}\n    Available Workers: {{ workers }}\n    System Context: {{ inputMessage.system_message }}\n\n    {{ _.role(\"user\") }}\n    Current Query: {{ inputMessage.user_query }}\n\n    {% if inputMessage.aggregatedMessages %}\n    Conversation History:\n    {% for message in inputMessage.aggregatedMessages %}\n    - {{ message }}\n    {% endfor %}\n    {% endif %}\n\n    {% if inputMessage.resource %}\n    Active Resources:\n    {{ inputMessage.resource }}\n    {% endif %}\n  \"#\n}\n\n// Test the function with a sample input. Open the VSCode playground to run this.\ntest responder {\n    functions [Respond]\n    args {\n        inputMessage {\n            system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n            user_query #\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#\n            aggredatedMessages [#\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#, #\"Summary: The sample with UID 'PAV-220630FLY-1031' is named '29518-190327' and is associated with the scientist JoAnne Flynn. It is categorized as a 'Scan' type sample and is linked to the protocol 'P.FLY-231011-V1_Patient-Visit-CD8.docx'. The sample was created on March 27, 2019, and is part of the Flynn Lab. Additional notes mention 'P0099'. The sample is a child of 'NHP-220630FLY-2'. More details can be found at the provided URI.\"#, #\"Here are the details for the sample with UID PAV-220630FLY-1031:\\n\\n- **Name**: 29518-190327\\n- **Notes**: P0099\\n- **Scientist**: JoAnne Flynn\\n- **Protocol**: [P.FLY-231011-V1_Patient-Visit-CD8.docx](https://nextseek.mit.edu/seek/sop/uid=P.FLY-231011-V1_Patient-Visit-CD8.docx)\\n- **Publish URI**: [Sample Link](https://fairdomhub.org/samples/23142)\\n- **Sample URL**: [Sample Details](https://nextseek.mit.edu/seek/sampletree/uid=PAV-220630FLY-1031)\"#, #\"Validation: The response is valid.\"#]\n            resource {\n                sample_metadata [\n                    {\n                        UID \"PAV-220630FLY-1031\"\n                        Name \"29518-190327\"\n                        Scientist \"JoAnne Flynn\"\n                    }\n                ],\n                protocolUrl \"https://nextseek.mit.edu/seek/sop/uid=P.FLY-231011-V1_Patient-Visit-CD8.docx\"\n                sampleUrl \"https://nextseek.mit.edu/seek/sampletree/uid=PAV-220630FLY-1031\"\n            }\n        },\n        workers [\n            {\n                agent \"response_formatter\"\n                role \"Aggregate and format information into an answer to the user's query\"\n                messages {\n                    system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                    user_query null\n                    aggredatedMessages null\n                    resource {\n                        sample_metadata null\n                        protocolUrl null\n                        sampleUrl null\n                    }\n                }\n            },\n            {\n                agent \"validator\"\n                role \"Validate the response from the response formatter\"\n                messages {\n                    system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                    user_query null\n                    aggredatedMessages null\n                    resource {\n                        sample_metadata null\n                        protocolUrl null\n                        sampleUrl null\n                    }\n                }\n            },\n            {\n                agent \"FINISH\"\n                role \"Finish the conversation\"\n                messages {\n                    system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                    user_query null\n                    aggredatedMessages null\n                    resource {\n                        sample_metadata null\n                        protocolUrl null\n                        sampleUrl null\n                    }\n                }\n            }\n        ]\n    }\n}",
    "response_formatter.baml": "function FormatResponse(messages: Payload) -> ResponseFormatter {\n\n    client MyClient\n        prompt #\"\n\n    Format a response using only the provided messages and resources. \n\n    Guidelines:\n    - Only use information from provided sources\n    - Preserve any special formatting (URLs, JSON, etc.)\n    - Indicate if information is insufficient to answer\n    - Structure the response clearly with bullet points when appropriate\n\n    {{ messages }}\n    {{ctx.output_format}}\n        \"#\n}\n\ntest BasicFormatting {\n  functions [FormatResponse]\n  args {\n    messages {\n      system_message \"You are a helpful lab assistant\"\n      user_query \"What protocol should I use for sample MIT-123?\"\n      aggregatedMessages [\"What protocol should I use for sample MIT-123?\"]\n    }\n  }\n}\n\ntest myresponse {\n\n    functions [FormatResponse]\n    args {\n        messages {\n            system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n            user_query #\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#\n            aggredatedMessages [#\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#, #\"Summary: The sample with UID 'PAV-220630FLY-1031' is named '29518-190327' and is associated with the scientist JoAnne Flynn. It is categorized as a 'Scan' type sample and is linked to the protocol 'P.FLY-231011-V1_Patient-Visit-CD8.docx'. The sample was created on March 27, 2019, and is part of the Flynn Lab. Additional notes mention 'P0099'. The sample is a child of 'NHP-220630FLY-2'. More details can be found at the provided URI.\"#]\n            resource {\n                sample_metadata [\n                    {\n                        UID \"PAV-220630FLY-1031\"\n                        Name \"29518-190327\"\n                        Scientist \"JoAnne Flynn\"\n                        RecordDate \"\"\n                        Protocol \"P.FLY-231011-V1_Patient-Visit-CD8.docx\"\n                        Type \"Scan\"\n                        Parent \"NHP-220630FLY-2\"\n                        VisitFacility \"Flynn Lab\"\n                        VisitLocation \"\"\n                        Notes \"P0099\"\n                        Publish_uri \"https://fairdomhub.org/samples/23142\"\n                    }],\n                protocolUrl \"https://nextseek.mit.edu/seek/sop/uid=P.FLY-231011-V1_Patient-Visit-CD8.docx\"\n                sampleUrl \"https://nextseek.mit.edu/seek/sampletree/uid=PAV-220630FLY-1031\"\n            }\n        }\n    }\n}\n\n",
    "schema_retriever.baml": "function RetrieveSchema(user_query: string, db_schema: DBSchema, parsed_query: ParsedQuery) -> SchemaMapper {\n    client MyClient\n    prompt #\"\n        Map the user query: \\n{{ user_query }} \\nto the database schema: \\n{{db_schema}} using the parsed query {{parsed_query}} as guidance.\n        The relevant database table is `seek_production.samples` which contains a JSON column 'json_metadata' with sample-specific metadata.\n        Extract only the keys that are actually present in the schema and are also relevant to the user query. \n        Do not invent any keys; if a key is not in the schema, omit it.\n        For example, if the user asks for 'samples of genotype X', return the closest matching keys from the schema such as 'UID' and 'Genotype'. \n        If the user query is not related to the database, return 'No relevant information found in the database.' \n        \\nImportant: Only return the relevant keys from the json_metadata column of the schema, the database schema as a json object, and your justification. Do not return any other information such as speculated keys or proposed queries.\n        {{ctx.output_format}}\n    \"#\n}\n\ntest retrieveSchema {\n    functions [RetrieveSchema]\n    args {\n        user_query #\"Retrieve UIDs of all samples of this genotype: 'RaDR+/+; GPT+/+; Aag -/-'\"#\n        db_schema {\n                tables [\n                {\n                    name \"seek_production.projects_samples\"\n                    columns [\n                        {\n                            name \"project_id\"\n                            type \"INTEGER\"\n                            nullable true\n                            default null\n                        },\n                        {\n                            name \"sample_id\"\n                            type \"INTEGER\"\n                            nullable true\n                            default null\n                        }]},\n                {\n                    name \"seek_production.samples\"\n                    columns [\n                        {\n                            name \"id\"\n                            type \"INTEGER\"\n                            nullable false\n                            default null\n                        },\n                        {\n                            name \"title\"\n                            type \"VARCHAR(255)\"\n                            nullable true\n                            default null\n                        },\n                        {\n                            name \"sample_type_id\"\n                            type \"INTEGER\"\n                            nullable true\n                            default null\n                        },\n            {\n            name \"json_metadata\"\n            type \"TEXT\"\n            nullable true\n            default null\n            json_keys [\n                \"Treatment2Dose\",\n                \"RepositoryID\",\n                \"StorageSite\",\n                \"Type\",\n                \"AntibodyParent\",\n                \"Reference\",\n                \"TreatmentTimeUnits\",\n                \"Protocol_Treatment\",\n                \"UID\",\n                \"Genotype\",\n                \"ReagentManufacturer\",\n                \"QC\",\n                \"Concentration\",\n                \"TreatmentDoseTime\",\n                \"TreatmentRoute\",\n                \"TotalProteinUnits\",\n                \"SourceFacility\",\n                \"Species\",\n                \"Notes\",\n                \"CellLineage\",\n                \"Parent\",\n                \"PassageNum\",\n                \"Treatment2\",\n                \"ValidationMethod\",\n                \"FMO\",\n                \"Scientist\",\n                \"Protocol_Stimulation\",\n                \"Timepoint\",\n                \"Repository\",\n                \"ValidationQuality\",\n                \"Treatment1Dose\",\n                \"Publish_uri\",\n                \"CellCount\",\n                \"BioSampleAccession\",\n                \"Protocol\",\n                \"QC_notes\",\n                \"Media\",\n                \"Treatment1Reference\",\n                \"Treatment1DoseUnits\",\n                \"Checksum_PrimaryType\",\n                \"StorageTemperature\",\n                \"TotalProtein\",\n                \"ReagentBrand\",\n                \"Instrument\",\n                \"Treatment2Reference\",\n                \"Phenotype\",\n                \"Stain\",\n                \"Fixation\",\n                \"Fixative\",\n                \"ReagenCatalogNum\",\n                \"Name\",\n                \"FlowAmount\",\n                \"Treatment2DoseUnits\",\n                \"TreatmentType\",\n                \"SEEKSubmissionDate\",\n                \"StorageLocation\",\n                \"Vendor\",\n                \"ConcentrationUnits\",\n                \"Software\",\n                \"Stimulation\",\n                \"SampleCreationDate\",\n                \"Link_PrimaryData\",\n                \"Checksum_PrimaryData\",\n                \"File_PrimaryData\",\n                \"Reagent\",\n                \"CellLine\",\n                \"InstrumentUser\",\n                \"Treatment1\",\n                \"StorageTemperatureUnits\",\n                \"Catalog#\",\n                \"BiosafetyLevel\",\n                \"FlowAmountUnits\",\n                \"Source\",\n                \"CompensationFCSParent\",\n                \"Path_PrimaryData\",\n                \"StorageType\"\n                        ]\n                    },\n            {\n                name \"uuid\"\n                type \"VARCHAR(255)\"\n                nullable true\n                            default null\n                        },\n            {\n                name \"contributor_id\"\n                type \"INTEGER\"\n                nullable true\n                default null\n            },\n            {\n                name \"policy_id\"\n                type \"INTEGER\"\n                nullable true\n                default null\n            },\n            {\n                name \"created_at\"\n                type \"DATETIME\"\n                nullable false\n                default null\n            },\n            {\n                name \"updated_at\"\n                type \"DATETIME\"\n                nullable false\n                default null\n            },\n            {\n                name \"first_letter\"\n                type \"VARCHAR(1)\"\n                nullable true\n                default null\n            },\n            {\n                name \"other_creators\"\n                type \"TEXT\"\n                nullable true\n                default null\n            },\n            {\n                name \"originating_data_file_id\"\n                type \"INTEGER\"\n                nullable true\n                default null\n            },\n            {\n                name \"deleted_contributor\"\n                type \"VARCHAR(255)\"\n                nullable true\n                default null\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n}\n",
    "supervisor.baml": "\n// Define Supervisor class\n// Create a function to validate the response from the responder.\nclient<llm> SupervisorClient {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o\"\n    temperature 0\n  }\n}\n\nfunction Supervise(Messages: Payload, workers: Agent[]) -> Supervisor {\n    client SupervisorClient\n  prompt #\"\n    You are a workflow supervisor that routes tasks to specialized workers based on user queries.\n\n    If none of the workers have the capability to answer the user query, then you should route the user query to the \"responder\" worker.\n\n    Key responsibilities:\n    1. Analyze the user query and available worker capabilities\n    2. Choose the most appropriate worker to handle the current task\n    3. Track conversation context in aggregatedMessages\n    4. Route to \"responder\" when ready to deliver final answer\n    5. If no workers are available, alwaysroute to \"FINISH\"\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"system\") }}\n    Current conversation state and available workers:\n\n    {{ _.role(\"user\") }}\n    Messages: {{ Messages }}\n    Workers: {{ workers }}\n  \"#\n}\ntest mysupervisor {\n    functions [Supervise]\n    args {\n        Messages {\n                system_message #\"You are a helpful assistant that is tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                user_query #\"Can you tell me a little about the sample NHP-220630FLY-15?\"#\n                aggredatedMessages [#\"Can you tell me a little about the sample NHP-220630FLY-15?\"#]\n            }\n        workers [\n            {\n            agent \"basic_sample_info_retriever\"\n            role \"Retrieve basic sample info for the sample\"\n            messages {\n                system_message null\n                user_query null\n                aggredatedMessages null\n            }\n            resource {\n            }\n            toolbox [\"get_sample_name\", \"retrieve_sample_info\"]\n            tools_description {\n            \"get_sample_name\" #\"Get the name of the sample.\\nArgs:\\nsample_metadata (list): A list of dictionaries containing sample metadata.\\nReturns: str: The name of the sample.\"#\n            \"retrieve_sample_info\" #\"Retrieve the sample information for a given sample UID.\\nArgs:\\nuid (str): The UID of the sample.\\nReturns:\\nList[dict] | None: A list containing the metadata dictionary for the sample or None if an error occurred.\"#\n        }\n            },\n            {\n                agent \"responder\"\n                role \"Validate and respond to the user's query\"\n                messages {\n                    system_message null\n                    user_query null\n                    aggredatedMessages null\n                }\n                resource {}\n            }\n        ]\n    }\n}",
    "validator.baml": "// Create a function to validate the response from the responder.\nclient<llm> ValidatorClient {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o\"\n    temperature 0.5\n  }\n}\n\nfunction ValidateResponse(inputMessage: Payload) -> Validator {\n  client ValidatorClient\n  prompt #\"\n    You are a validation expert. Analyze the conversation and validate if the response adequately addresses the user's query.\n\n    Validation Checklist:\n    1. Check if all parts of the user's query are addressed\n    2. Verify any resources or links mentioned are present in the ResourceBox\n    3. Ensure no information is fabricated\n    4. Confirm technical accuracy and format consistency\n    5. Important: Always address your clarifying questions to the **user**.\n    6. Don't assume an information is wrong, only address gaps in the information provided based on the user's query\n\n    If invalid, you should either:\n      1. Provide a specific clarifying question addressing the gap, OR\n      2. Summarize the error for the user in a polite and friendly manner if the response is invalid because an error occurred at any point in the previous workers.\n    {{ inputMessage }}\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample response. Open the VSCode playground to run this.\ntest validateResponse {\n    functions [ValidateResponse]\n    args {\n        inputMessage {\n            system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n            user_query #\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#\n            aggredatedMessages [#\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#, #\"Summary: The sample with UID 'PAV-220630FLY-1031' is named '29518-190327' and is associated with the scientist JoAnne Flynn. It is categorized as a 'Scan' type sample and is linked to the protocol 'P.FLY-231011-V1_Patient-Visit-CD8.docx'. The sample was created on March 27, 2019, and is part of the Flynn Lab. Additional notes mention 'P0099'. The sample is a child of 'NHP-220630FLY-2'. More details can be found at the provided URI.\"#, #\"Here are the details for the sample with UID PAV-220630FLY-1031:\\n\\n- **Name**: 29518-190327\\n- **Notes**: P0099\\n- **Scientist**: JoAnne Flynn\\n- **Protocol**: [P.FLY-231011-V1_Patient-Visit-CD8.docx](https://nextseek.mit.edu/seek/sop/uid=P.FLY-231011-V1_Patient-Visit-CD8.docx)\\n- **Publish URI**: [Sample Link](https://fairdomhub.org/samples/23142)\\n- **Sample URL**: [Sample Details](https://nextseek.mit.edu/seek/sampletree/uid=PAV-220630FLY-1031)\"#]\n            resource {\n                sample_metadata [\n                    {\n                        UID \"PAV-220630FLY-1031\"\n                        Name \"29518-190327\"\n                        Scientist \"JoAnne Flynn\"\n                    }\n                ],\n                protocolUrl \"https://nextseek.mit.edu/seek/sop/uid=P.FLY-231011-V1_Patient-Visit-CD8.docx\"\n                sampleUrl \"https://nextseek.mit.edu/seek/sampletree/uid=PAV-220630FLY-1031\"\n            }\n        }\n    }\n}",
}

def get_baml_files():
    return file_map