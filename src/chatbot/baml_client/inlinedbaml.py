###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> MyClient {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o-mini\"\n    temperature 0.25\n  }\n}\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "data_summarizer.baml": "\nfunction SummarizeData(inputMessage: Messages, resources: ResourceBox) -> DataSummarizer {\n    client MyClient\n    prompt #\"\n    Summarize the input message in a concise manner. Ensure the summary remains relevant to the user's query. If the input message is already concise, return the input message as the summary. Justify your response.\n    {{inputMessage}}\n    {{resources}}\n    {{ctx.output_format}}\n    \"#\n}\n\ntest summary {\n    functions [SummarizeData]\n    args {\n        inputMessage #\"\n            The protocol for the sample NHP-220630FLY-2 can be accessed [here](https://nextseek.mit.edu/seek/sop/uid=P.FLY-220823-V1_P---NHP_housing.docx/).\n        \"#\n        user_query #\"\n            What is the protocol for the sample NHP-220630FLY-2?\n        \"#\n    }\n}\n",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.74.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "models.baml": "class DataSummarizer {\n    Next_worker string @description(\"The next worker to call : 'responder'\")\n    summary string @description(\"The summary of the input message\")\n    messages Messages @description(\"The messages in the conversation\")\n    justification string @description(\"The justification for your response\")\n}\n\nclass Navigator {\n    agent Agent @description(\"The current agent in the conversation\")\n    next_tool string @description(\"The next tool to use from the agent's toolbox\")\n    tool_args string[] @description(\"The arguments to pass to the tool\")\n    justification string @description(\"The justification for choosing the next tool\")\n}\n\nclass Responder {\n    Next_worker Agent @description(\"The next worker to call\")\n    justification string @description(\"The justification for choosing the next worker\")\n}\n\nclass ResponseFormatter {\n    Next_worker string @description(\"The next worker to call : responder\")\n    formattedResponse string @description(\"The formatted response to the user\")\n    name string @description(\"The name of the current worker : response_formatter\")\n    messages Messages @description(\"The messages in the conversation\")\n    justification string @description(\"The justification for your response\")\n}\n\nclass Supervisor {\n    Next_worker Agent @description(\"The next worker to call\")\n    justification string @description(\"The justification for choosing the next worker\")\n}\n\nclass ResourceBox {\n    sample_metadata Metadata[]? @description(\"The metadata of the sample\")\n    protocol_link string? @description(\"The link to download the protocol associated with a sample\")\n    link string? @description(\"The link to the sample: https://nextseek.mit.edu/seek/sampletree/uid=<sample_uid>\")\n}\n\nclass Metadata {\n    UID string?\n    Name string?\n    ID string?\n    DateOfBirth string?\n    Sex string?\n    Species string?\n    Origin string?\n    Facility string?\n    Notes string?\n    Contact string?\n    Scientist string?\n    Publish_uri string?\n    CoScientist string?\n    Treatment1 string?\n    Treatment1Type string?\n    Treatment1Route string?\n    Treatment1Date string?\n    Treatment1Dose string?\n    Treatment1DoseUnits string?\n    Treatment2 string?\n    Treatment2Type string?\n    Treatment2Route string?\n    Treatment2Date string?\n    Treatment2Dose string?\n    Treatment2DoseUnits string?\n    NecropsyDate string?\n    Cohort string?\n    Supplier string?\n    Treatment3 string?\n    Treatment3Type string?\n    Protocol string?\n    Study string?\n    Funder string?\n    TotalCFU string?\n    LungCFU string?\n    LymphNodeCFU string?\n    TotalPathologyScore string?\n    LungPathologyScore string?\n    LymphNodePathologyScore string?\n    CFUUnits string?\n    AlternativeID string?\n    StudyDesign string?\n    Link_StudyDesign string?\n    NewGranulomaCount string?\n    nhp_id string?\n    LINK string?\n    START_DATE string?\n    STOP_DATE string?\n    TYPE string?\n    PATIENT_ID string?\n    EVENT_TYPE string?\n    STUDY_DESIGN_NOTES string?\n    DOSE string?\n    TREATMENT_PARENT string?\n    ORGAN_DETAIL string?\n    ORGAN string?\n    TREATMENT string?\n    CFU string?\n    NAME string?\n    DOSE_UNITS string?\n    SAMPLE_ID string?\n    ROUTE string?\n    PARENT string?\n    Treatment3Route string?\n    Treatment3Date string?\n    Treatment3Dose string?\n    Treatment3DoseUnits string?\n}\n\nclass Messages {\n    system_message string @description(\"The system message\")\n    user_query string @description(\"The user message\")\n    aggredatedMessages string[]? @description(\"The aggregated messages in the conversation\")\n}\n\nclass Agent {\n    agent string @description(\"The name of the agent\")\n    role string @description(\"The role of the agent\")\n    messages Messages @description(\"The messages in the conversation\")\n    resource ResourceBox @description(\"The resources available to the agent\")\n    toolbox string[]? @description(\"The toolbox of the agent\")\n    tools_description map<string, string>? @description(\"The description of the tools in the toolbox\")\n}\n\nclass Validator {\n    name string @description(\"The name of the current agent : validator\")\n    Valid bool @description(\"Whether the response is valid\")\n    Clarifying_Question string? @description(\"A clarifying question to the user if Valid is false\")\n    justification string @description(\"The justification for your response\")\n    Next_worker string @description(\"The next worker to call : responder\")\n    response Messages @description(\"same as inputMessage\")\n}",
    "navigator.baml": "\nfunction Navigate(agent: Agent) -> Navigator {\n    client MyClient\n    prompt #\"\n        Determine the next tool to use to answer the user's query.\n        Return the **exact** name of the agent provided in {{agent}} for the next_agent. \n        Choose a tool from the toolbox and return the name of the tool as the next_tool, not the agent name or the description of the tool.\n        Return exactly the argument to pass to the tool as the tool_arg based on the user_query and the summedMessages.\n        Return the justification for your choice of tool and the next_agent.\n        {{agent}}\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest navigator {\n    functions [Navigate]\n    args {\n        agent {\n            agent \"basic_sample_info_retriever\"\n            messages {\n                system_message #\"You are a helpful assistant that is tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                user_query #\"Can you tell me a little about the sample NHP-220630FLY-15?\"#\n                aggredatedMessages [#\"Can you tell me a little about the sample NHP-220630FLY-15?\"#]\n            }\n            resource {\n            }\n            toolbox [\"get_sample_name\", \"retrieve_sample_info\"]\n            tools_description {\n            \"get_sample_name\" #\"Get the name of the sample.\\nArgs:\\nsample_metadata (list): A list of dictionaries containing sample metadata.\\nReturns: str: The name of the sample.\"#\n            \"retrieve_sample_info\" #\"Retrieve the sample information for a given sample UID.\\nArgs:\\nuid (str): The UID of the sample.\\nReturns:\\nList[dict] | None: A list containing the metadata dictionary for the sample or None if an error occurred.\"#\n        }\n    }\n    }\n}\n",
    "responder.baml": "// Create a function to respond to the user's query.\nfunction Respond(inputMessage: Messages, workers: Agent[], prev_worker: string?) -> Responder {\n    client MyClient\n      prompt #\"\n        Sequentially use the workers in the order of {{ workers }} to respond to the user's query. \n        If the worker has 'optional' in the name, only use it as needed.\n        Never return the same worker name multiple times.\n        Once you have a response from the \"validator\", the next worker must be \"FINISH\".\n        {{inputMessage}}\n        {{prev_worker}}\n        {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample input. Open the VSCode playground to run this.\ntest responder {\n    functions [Respond]\n    args {\n        inputMessage {\n            system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n            user_query #\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#\n            aggredatedMessages [#\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#, #\"Summary: The sample with UID 'PAV-220630FLY-1031' is named '29518-190327' and is associated with the scientist JoAnne Flynn. It is categorized as a 'Scan' type sample and is linked to the protocol 'P.FLY-231011-V1_Patient-Visit-CD8.docx'. The sample was created on March 27, 2019, and is part of the Flynn Lab. Additional notes mention 'P0099'. The sample is a child of 'NHP-220630FLY-2'. More details can be found at the provided URI.\"#]\n\n        },\n        workers [\n            {\n                agent \"response_formatter\"\n                role \"Aggregate and format information into an answer to the user's query\"\n                messages {\n                    system_message null\n                    user_query null\n                    aggredatedMessages null\n                }\n                resource {}\n            },\n            {\n                agent \"validator\"\n                role \"Validate the response from the response formatter\"\n                messages {\n                    system_message null\n                    user_query null\n                    aggredatedMessages null\n                }\n                resource {}\n            },\n            {\n                agent \"FINISH\"\n                role \"Finish the conversation\"\n                messages {\n                    system_message null\n                    user_query null\n                    aggredatedMessages null\n                }\n                resource {}\n            }\n        ]\n    }\n}",
    "response_formatter.baml": "function FormatResponse(user_query: string, messages: Messages, resources: ResourceBox) -> ResponseFormatter {\n\n    client MyClient\n        prompt #\"\n\n        Use the resources {{resources}} and the messages {{messages}} in the conversation as ground truth to answer the user's query {{user_query}}. \n        Never make up information or make assumptions. Only use the information provided in the resources and the messages.\n        Maintain any special formatting in your response such as urls/links, json format etc. as provided in the resources while briefly summarizing the information in the messages.\n        Your response should look like this:\n        - Summary of messages from the conversation that answers the user's query\n        - Any relevant resources from the resources box exactly as is.\n        - If the user's query is not answered in the messages, say so.\n\n        {{ctx.output_format}}\n        \"#\n}\n\ntest myresponse {\n\n    functions [FormatResponse]\n    args {\n        user_query #\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#\n        messages {\n            system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n            user_query #\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#\n            aggredatedMessages [#\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#, #\"Summary: The sample with UID 'PAV-220630FLY-1031' is named '29518-190327' and is associated with the scientist JoAnne Flynn. It is categorized as a 'Scan' type sample and is linked to the protocol 'P.FLY-231011-V1_Patient-Visit-CD8.docx'. The sample was created on March 27, 2019, and is part of the Flynn Lab. Additional notes mention 'P0099'. The sample is a child of 'NHP-220630FLY-2'. More details can be found at the provided URI.\"#]\n        }\n        resources {\n            sample_metadata [\n            {\n                \"UID\" \"PAV-220630FLY-1031\"\n                \"Name\" \"29518-190327\"\n                \"Scientist\" \"JoAnne Flynn\"\n                \"RecordDate\" \"\"\n                \"Protocol\" \"P.FLY-231011-V1_Patient-Visit-CD8.docx\"\n                \"Type\" \"Scan\"\n                \"Procedure\" \"\"\n                \"CollectionTime\" \"\"\n                \"Parent\" \"NHP-220630FLY-2\"\n                \"VisitFacility\" \"Flynn Lab\"\n                \"VisitLocation\" \"\"\n                \"Notes\" \"P0099\"\n                \"Publish_uri\" \"https://fairdomhub.org/samples/23142\"\n            }]\n        }\n    }\n}\n\n",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
    "supervisor.baml": "\n// Define Supervisor class\n\n\nfunction Supervise(Messages: Messages, workers: Agent[]) -> Supervisor {\n    client MyClient\n    prompt #\"\n        You are a supervisor that decides which worker to call next based on the user's query.\n        Decide which worker from the list of workers to call next based on the user's query and/or the messages from the previous worker and the worker's description.\n        **Only call the necessary workers to answer the user's query.**\n        Return the next worker, the aggregated messages, and the user's query.\n        If no worker has been called yet, return the user's query for aggregatedMessages.\n        When receive a response from a worker, use the result to answer the user's query. \n        Maintain any special formatting in your response such as urls/links, json format etc. while briefly summarizing the information. \n        If you have enough information to fully answer the user's query, return the next worker as \"responder\".  \n        {{ Messages }}\n        {{ workers }}\n        {{ ctx.output_format }}\n\n    \"#\n}\ntest mysupervisor {\n    functions [Supervise]\n    args {\n        Messages {\n                system_message #\"You are a helpful assistant that is tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                user_query #\"Can you tell me a little about the sample NHP-220630FLY-15?\"#\n                aggredatedMessages [#\"Can you tell me a little about the sample NHP-220630FLY-15?\"#]\n            }\n        workers [\n            {\n            agent \"basic_sample_info_retriever\"\n            role \"Retrieve basic sample info for the sample\"\n            messages {\n                system_message null\n                user_query null\n                aggredatedMessages null\n            }\n            resource {\n            }\n            toolbox [\"get_sample_name\", \"retrieve_sample_info\"]\n            tools_description {\n            \"get_sample_name\" #\"Get the name of the sample.\\nArgs:\\nsample_metadata (list): A list of dictionaries containing sample metadata.\\nReturns: str: The name of the sample.\"#\n            \"retrieve_sample_info\" #\"Retrieve the sample information for a given sample UID.\\nArgs:\\nuid (str): The UID of the sample.\\nReturns:\\nList[dict] | None: A list containing the metadata dictionary for the sample or None if an error occurred.\"#\n        }\n            },\n            {\n                agent \"responder\"\n                role \"Validate and respond to the user's query\"\n                messages {\n                    system_message null\n                    user_query null\n                    aggredatedMessages null\n                }\n                resource {}\n            }\n        ]\n    }\n}",
    "validator.baml": "// Create a function to validate the response from the responder.\nfunction ValidateResponse(inputMessage: Messages) -> Validator {\n  client MyClient\n  prompt #\"\n    Validate the relevance of the response to the user's query. \n    Focus on the latest message in the conversation.\n    Break down the user query into smaller parts and validate the response against each part.\n    The next worker should always be the 'responder' unless otherwise specified in the response. \n    Justify your response.\n    {{ inputMessage }}\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample response. Open the VSCode playground to run this.\ntest myresponse {\n    functions [ValidateResponse]\n    args {\n        inputMessage {\n            system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n            user_query #\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#\n            aggredatedMessages [#\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#, #\"Summary: The sample with UID 'PAV-220630FLY-1031' is named '29518-190327' and is associated with the scientist JoAnne Flynn. It is categorized as a 'Scan' type sample and is linked to the protocol 'P.FLY-231011-V1_Patient-Visit-CD8.docx'. The sample was created on March 27, 2019, and is part of the Flynn Lab. Additional notes mention 'P0099'. The sample is a child of 'NHP-220630FLY-2'. More details can be found at the provided URI.\"#]\n        }\n    }\n}",
}

def get_baml_files():
    return file_map