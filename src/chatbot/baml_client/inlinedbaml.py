###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> MyClient {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o-mini\"\n    temperature 0.25\n  }\n}\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "data_summarizer.baml": "\nfunction SummarizeData(inputMessage: Payload) -> DataSummarizer {\n    client MyClient\n    prompt #\"\n    Analyze the conversation and create a concise but informative summary. Focus on:\n    1. Key points relevant to the user's query\n    2. Important details from available resources\n    3. Your summary should attempt to answer the user's query based on the information available\n    4. Never make up information, only use the information provided\n    5. Format your response as if addressing the user directly\n\n    {{ inputMessage }}\n    {{ ctx.output_format }}\n    \"#\n}\n\ntest BasicSummary {\n  functions [SummarizeData]\n  args {\n    inputMessage {\n      user_query \"Can you help me find protocols related to RNA extraction from blood samples?\"\n      system_message \"Lab assistant helping with protocol searches\"\n      aggregatedMessages [\"Can you help me find protocols related to RNA extraction from blood samples?\"]\n    }\n  }\n}\n\ntest ComplexSummary {\n  functions [SummarizeData]\n  args {\n    inputMessage {\n      user_query \"I need the protocol from sample MIT-123 and its metadata\"\n      system_message \"Lab protocol assistant\"\n      aggregatedMessages [\"I need the protocol from sample MIT-123 and its metadata\"]\n      resource {\n        sampleMetadata [\n          {\n            id \"MIT-123\"\n            type \"blood_sample\"\n          }\n        ]\n        protocolUrl \"https://protocols.mit.edu/123\"\n        sampleUrl \"https://nextseek.mit.edu/seek/sampletree/uid=MIT-123\"\n      }\n    }\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.75.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "models.baml": "class DataSummarizer {\n    summary string @description(\"The summary of the input message\")\n    messages Payload @description(\"The messages in the conversation\")\n    justification string @description(\"The justification for your response\")\n}\n\nclass Navigator {\n    agent Agent @description(\"The current agent in the conversation\")\n    next_tool string @description(\"The next tool to use from the agent's toolbox\")\n    tool_args string[] @description(\"The arguments to pass to the tool\")\n    justification string @description(\"The justification for choosing the next tool\")\n}\n\nclass Responder {\n    Next_worker Agent @description(\"The next worker to call\")\n    justification string @description(\"The justification for choosing the next worker\")\n}\n\nclass ResponseFormatter {\n    formattedResponse string @description(\"Formatted response for the user\")\n    name string @description(\"The name of the current worker : response_formatter\")\n    messages Payload @description(\"Conversation history and context\")\n    justification string @description(\"The justification for your response\")\n}\n\nclass Supervisor {\n    Next_worker Agent @description(\"The next worker to call\")\n    justification string @description(\"The justification for choosing the next worker\")\n}\n\nclass ResourceBox {\n    sample_metadata Metadata[]? @description(\"Sample metadata\")\n    protocolUrl string? @description(\"Protocol download URL i.e.: https://nextseek.mit.edu/seek/sop/uid=<protocol_uid>\")\n    sampleUrl string? @description(\"Sample URL i.e.: https://nextseek.mit.edu/seek/sampletree/uid=<sample_uid>\")\n    UIDs string[]? @description(\"List of UIDs\")\n}\n\nclass Metadata {\n    UID string?\n    Name string?\n    ID string?\n    DateOfBirth string?\n    Sex string?\n    Species string?\n    Origin string?\n    Facility string?\n    Notes string?\n    Contact string?\n    Scientist string?\n    Publish_uri string?\n    CoScientist string?\n    Treatment1 string?\n    Treatment1Type string?\n    Treatment1Route string?\n    Treatment1Date string?\n    Treatment1Dose string?\n    Treatment1DoseUnits string?\n    Treatment2 string?\n    Treatment2Type string?\n    Treatment2Route string?\n    Treatment2Date string?\n    Treatment2Dose string?\n    Treatment2DoseUnits string?\n    NecropsyDate string?\n    Cohort string?\n    Supplier string?\n    Treatment3 string?\n    Treatment3Type string?\n    Protocol string?\n    Study string?\n    Funder string?\n    TotalCFU string?\n    LungCFU string?\n    LymphNodeCFU string?\n    TotalPathologyScore string?\n    LungPathologyScore string?\n    LymphNodePathologyScore string?\n    CFUUnits string?\n    AlternativeID string?\n    StudyDesign string?\n    Link_StudyDesign string?\n    NewGranulomaCount string?\n    nhp_id string?\n    LINK string?\n    START_DATE string?\n    STOP_DATE string?\n    TYPE string?\n    PATIENT_ID string?\n    EVENT_TYPE string?\n    STUDY_DESIGN_NOTES string?\n    DOSE string?\n    TREATMENT_PARENT string?\n    ORGAN_DETAIL string?\n    ORGAN string?\n    TREATMENT string?\n    CFU string?\n    NAME string?\n    DOSE_UNITS string?\n    SAMPLE_ID string?\n    ROUTE string?\n    PARENT string?\n    Treatment3Route string?\n    Treatment3Date string?\n    Treatment3Dose string?\n    Treatment3DoseUnits string?\n}\n\nclass Payload {\n    system_message string @description(\"The system message\")\n    user_query string @description(\"The user message\")\n    aggregatedMessages string[]? @description(\"The aggregated messages in the conversation\")\n    resource ResourceBox? @description(\"The resources available to the agent\")\n}\n\nclass Agent {\n    agent string @description(\"The name of the agent\")\n    role string @description(\"The role of the agent\")\n    toolbox map<string, ToolMetadata>? @description(\"The toolbox of the agent\")\n}\n\nclass Validator {\n    name string @description(\"The name of the current agent : validator\")\n    Valid bool @description(\"Whether the response is valid\")\n    Clarifying_Question string? @description(\"A clarifying question to the user if Valid is false\")\n    justification string @description(\"The justification for your response\")\n    response Payload @description(\"same as inputMessage\")\n}\n\nclass ToolMetadata {\n    doc string @description(\"The documentation of the tool\")\n    signature string @description(\"The signature of the tool\")\n}",
    "navigator.baml": "\nclient<llm> NavClient {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o\"\n    temperature 0.7\n  }\n}\n\nfunction Navigate(agent: Agent, payload: Payload) -> Navigator {\n    client NavClient\n    prompt #\"\n    You are a navigation system that determines the next appropriate tool to use from an agent's toolbox.\n\n    Instructions:\n    1. Analyze the user query and conversation context\n    2. Select a tool from the agent's toolbox that best addresses the current need\n    3. Format tool arguments precisely based on the tool's requirements\n    4. Provide clear justification for your tool selection\n    5. Do not return a tool if none appear suitable to answer the user query. Instead return an empty string for the tool name and an empty list for the tool arguments.\n\n    Constraints:\n    - The tool name must exactly match one in the agent's toolbox\n    - Tool arguments should be specific and actionable\n    - If no suitable tool exists, explain why in the justification\n\n    - Conversation Context:\n    {{ payload }}\n    {{ ctx.output_format }}\n\n    {{ _.role(\"system\") }}\n    Current agent state and available tools:\n\n    {{ _.role(\"user\") }}\n    Agent Information:\n    {{ agent }}\n  \"#\n}\n\ntest navigator {\n    functions [Navigate]\n    args {\n        agent {\n            agent \"basic_sample_info_retriever\"\n            role \"retrieves basic sample metadata\"\n            messages {\n                system_message #\"You are a helpful assistant that is tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                user_query #\"What is the weather today?\"#\n                aggredatedMessages [#\"Can you tell me a little about the sample NHP-220630FLY-15?\"#]\n            }\n            resource {\n            }\n            toolbox [\"get_sample_name\", \"retrieve_sample_info\"]\n            tools_description {\n            \"get_sample_name\" #\"Get the name of the sample.\\nArgs:\\nsample_metadata (list): A list of dictionaries containing sample metadata.\\nReturns: str: The name of the sample.\"#\n            \"retrieve_sample_info\" #\"Retrieve the sample information for a given sample UID.\\nArgs:\\nuid (str): The UID of the sample.\\nReturns:\\nList[dict] | None: A list containing the metadata dictionary for the sample or None if an error occurred.\"#\n        }\n    }\n    }\n}\n",
    "query_parser.baml": "class QueryParser {\n    parsed_query string @description(\"Parsed user query\")\n    tasks string[] @description(\"List of tasks to be performed\")\n    justification string @description(\"Explanation of the reasoning behind the parsed query\")\n}\n\nclient<llm> ParseQueryClient {\n    provider \"openai\"\n    options {\n        api_key env.OPENAI_API_KEY\n        model \"gpt-4o\"\n        temperature 0.7\n    }\n}\nfunction ParseQuery(user_query: string, tools: map<string, ToolMetadata>) -> QueryParser {\n    client ParseQueryClient\n    prompt  #\"\n    You are a query parser that breaks down complex user queries into atomic tasks.\n    Your goal is to create a clear sequence of tasks that can be executed to fully answer the query.\n    Each task should be self-contained and specific.\n\n    Example:\n    User: \"What are siblings of sample 123?\"\n    Tasks would be:\n    1. Get parent for sample 123\n    2. Get children for parent of sample 123\n\n    If you are unsure about the tasks, you can ask the user for clarification by returning a question as the parsed_query and justification as \"I am unsure about the tasks. Please clarify your query.\"\n\n    {{ _.role(\"user\") }} {{ user_query }}\n    {{ tools }}\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest SimpleQueryParse {\n  functions [ParseQuery]\n  args {\n    user_query \"What's the weather like in Paris and should I pack an umbrella?\"\n  }\n}\n\ntest ComplexQueryParse {\n  functions [ParseQuery]\n  args {\n    user_query \"What is the link to the sample page for the parent sample of sample 1099?\"\n  }\n}",
    "responder.baml": "// Create a function to respond to the user's query.\nfunction Respond(inputMessage: Payload, workers: Agent[]) -> Responder {\n    client MyClient\n      prompt  #\"\n    You are a workflow coordinator selecting the next appropriate worker to handle this conversation.\n\n    Worker Selection Rules:\n    1. Workers must be used in this sequence: {{ workers }}\n    2. Workers must be used in the order of the list \n    3. Workers with 'optional' in name should only be used when necessary\n    4. Never repeat a worker\n    5. After 'validator' worker, always transition to 'FINISH'\n    6. Choose based on the current conversation state and needs\n\n    Selection Process:\n    - Analyze the current conversation stage\n    - Check if optional workers are needed\n    - Verify if validation is complete\n    - Provide clear justification for your choice\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"system\") }}\n    Available Workers: {{ workers }}\n    System Context: {{ inputMessage.system_message }}\n\n    {{ _.role(\"user\") }}\n    Current Query: {{ inputMessage.user_query }}\n\n    {% if inputMessage.aggregatedMessages %}\n    Conversation History:\n    {% for message in inputMessage.aggregatedMessages %}\n    - {{ message }}\n    {% endfor %}\n    {% endif %}\n\n    {% if inputMessage.resource %}\n    Active Resources:\n    {{ inputMessage.resource }}\n    {% endif %}\n  \"#\n}\n\n// Test the function with a sample input. Open the VSCode playground to run this.\ntest responder {\n    functions [Respond]\n    args {\n        inputMessage {\n            system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n            user_query #\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#\n            aggredatedMessages [#\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#, #\"Summary: The sample with UID 'PAV-220630FLY-1031' is named '29518-190327' and is associated with the scientist JoAnne Flynn. It is categorized as a 'Scan' type sample and is linked to the protocol 'P.FLY-231011-V1_Patient-Visit-CD8.docx'. The sample was created on March 27, 2019, and is part of the Flynn Lab. Additional notes mention 'P0099'. The sample is a child of 'NHP-220630FLY-2'. More details can be found at the provided URI.\"#, #\"Here are the details for the sample with UID PAV-220630FLY-1031:\\n\\n- **Name**: 29518-190327\\n- **Notes**: P0099\\n- **Scientist**: JoAnne Flynn\\n- **Protocol**: [P.FLY-231011-V1_Patient-Visit-CD8.docx](https://nextseek.mit.edu/seek/sop/uid=P.FLY-231011-V1_Patient-Visit-CD8.docx)\\n- **Publish URI**: [Sample Link](https://fairdomhub.org/samples/23142)\\n- **Sample URL**: [Sample Details](https://nextseek.mit.edu/seek/sampletree/uid=PAV-220630FLY-1031)\"#, #\"Validation: The response is valid.\"#]\n            resource {\n                sample_metadata [\n                    {\n                        UID \"PAV-220630FLY-1031\"\n                        Name \"29518-190327\"\n                        Scientist \"JoAnne Flynn\"\n                    }\n                ],\n                protocolUrl \"https://nextseek.mit.edu/seek/sop/uid=P.FLY-231011-V1_Patient-Visit-CD8.docx\"\n                sampleUrl \"https://nextseek.mit.edu/seek/sampletree/uid=PAV-220630FLY-1031\"\n            }\n        },\n        workers [\n            {\n                agent \"response_formatter\"\n                role \"Aggregate and format information into an answer to the user's query\"\n                messages {\n                    system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                    user_query null\n                    aggredatedMessages null\n                    resource {\n                        sample_metadata null\n                        protocolUrl null\n                        sampleUrl null\n                    }\n                }\n            },\n            {\n                agent \"validator\"\n                role \"Validate the response from the response formatter\"\n                messages {\n                    system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                    user_query null\n                    aggredatedMessages null\n                    resource {\n                        sample_metadata null\n                        protocolUrl null\n                        sampleUrl null\n                    }\n                }\n            },\n            {\n                agent \"FINISH\"\n                role \"Finish the conversation\"\n                messages {\n                    system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                    user_query null\n                    aggredatedMessages null\n                    resource {\n                        sample_metadata null\n                        protocolUrl null\n                        sampleUrl null\n                    }\n                }\n            }\n        ]\n    }\n}",
    "response_formatter.baml": "function FormatResponse(messages: Payload) -> ResponseFormatter {\n\n    client MyClient\n        prompt #\"\n\n    Format a response using only the provided messages and resources. \n\n    Guidelines:\n    - Only use information from provided sources\n    - Preserve any special formatting (URLs, JSON, etc.)\n    - Indicate if information is insufficient to answer\n    - Structure the response clearly with bullet points when appropriate\n\n    {{ messages }}\n    {{ctx.output_format}}\n        \"#\n}\n\ntest BasicFormatting {\n  functions [FormatResponse]\n  args {\n    messages {\n      system_message \"You are a helpful lab assistant\"\n      user_query \"What protocol should I use for sample MIT-123?\"\n      aggregatedMessages [\"What protocol should I use for sample MIT-123?\"]\n    }\n  }\n}\n\ntest myresponse {\n\n    functions [FormatResponse]\n    args {\n        messages {\n            system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n            user_query #\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#\n            aggredatedMessages [#\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#, #\"Summary: The sample with UID 'PAV-220630FLY-1031' is named '29518-190327' and is associated with the scientist JoAnne Flynn. It is categorized as a 'Scan' type sample and is linked to the protocol 'P.FLY-231011-V1_Patient-Visit-CD8.docx'. The sample was created on March 27, 2019, and is part of the Flynn Lab. Additional notes mention 'P0099'. The sample is a child of 'NHP-220630FLY-2'. More details can be found at the provided URI.\"#]\n            resource {\n                sample_metadata [\n                    {\n                        UID \"PAV-220630FLY-1031\"\n                        Name \"29518-190327\"\n                        Scientist \"JoAnne Flynn\"\n                        RecordDate \"\"\n                        Protocol \"P.FLY-231011-V1_Patient-Visit-CD8.docx\"\n                        Type \"Scan\"\n                        Parent \"NHP-220630FLY-2\"\n                        VisitFacility \"Flynn Lab\"\n                        VisitLocation \"\"\n                        Notes \"P0099\"\n                        Publish_uri \"https://fairdomhub.org/samples/23142\"\n                    }],\n                protocolUrl \"https://nextseek.mit.edu/seek/sop/uid=P.FLY-231011-V1_Patient-Visit-CD8.docx\"\n                sampleUrl \"https://nextseek.mit.edu/seek/sampletree/uid=PAV-220630FLY-1031\"\n            }\n        }\n    }\n}\n\n",
    "supervisor.baml": "\n// Define Supervisor class\n// Create a function to validate the response from the responder.\nclient<llm> SupervisorClient {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o-mini\"\n    temperature 0.7\n  }\n}\n\nfunction Supervise(Messages: Payload, workers: Agent[]) -> Supervisor {\n    client SupervisorClient\n  prompt #\"\n    You are a workflow supervisor that routes tasks to specialized workers based on user queries.\n\n    If none of the workers have the capability to answer the user query, then you should route the user query to the \"responder\" worker.\n\n    Key responsibilities:\n    1. Analyze the user query and available worker capabilities\n    2. Choose the most appropriate worker to handle the current task\n    3. Track conversation context in aggregatedMessages\n    4. Route to \"responder\" when ready to deliver final answer\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"system\") }}\n    Current conversation state and available workers:\n\n    {{ _.role(\"user\") }}\n    Messages: {{ Messages }}\n    Workers: {{ workers }}\n  \"#\n}\ntest mysupervisor {\n    functions [Supervise]\n    args {\n        Messages {\n                system_message #\"You are a helpful assistant that is tasked with answering user questions about a data management platform called NExtSEEK.\"#\n                user_query #\"Can you tell me a little about the sample NHP-220630FLY-15?\"#\n                aggredatedMessages [#\"Can you tell me a little about the sample NHP-220630FLY-15?\"#]\n            }\n        workers [\n            {\n            agent \"basic_sample_info_retriever\"\n            role \"Retrieve basic sample info for the sample\"\n            messages {\n                system_message null\n                user_query null\n                aggredatedMessages null\n            }\n            resource {\n            }\n            toolbox [\"get_sample_name\", \"retrieve_sample_info\"]\n            tools_description {\n            \"get_sample_name\" #\"Get the name of the sample.\\nArgs:\\nsample_metadata (list): A list of dictionaries containing sample metadata.\\nReturns: str: The name of the sample.\"#\n            \"retrieve_sample_info\" #\"Retrieve the sample information for a given sample UID.\\nArgs:\\nuid (str): The UID of the sample.\\nReturns:\\nList[dict] | None: A list containing the metadata dictionary for the sample or None if an error occurred.\"#\n        }\n            },\n            {\n                agent \"responder\"\n                role \"Validate and respond to the user's query\"\n                messages {\n                    system_message null\n                    user_query null\n                    aggredatedMessages null\n                }\n                resource {}\n            }\n        ]\n    }\n}",
    "validator.baml": "// Create a function to validate the response from the responder.\nclient<llm> ValidatorClient {\n  provider \"openai\"\n  options {\n    api_key env.OPENAI_API_KEY\n    model \"gpt-4o\"\n    temperature 0\n  }\n}\n\nfunction ValidateResponse(inputMessage: Payload) -> Validator {\n  client ValidatorClient\n  prompt #\"\n    You are a validation expert. Analyze the conversation and validate if the response adequately addresses the user's query.\n\n    Validation Checklist:\n    1. Check if all parts of the user's query are addressed\n    2. Verify any resources or links mentioned are present in the ResourceBox\n    3. Ensure no information is fabricated\n    4. Confirm technical accuracy and format consistency\n    5. Address your clarifying questions to the user if needed\n    6. Don't assume an information is wrong, only address gaps in the information provided based on the user's query\n\n    If invalid, provide a specific clarifying question addressing the gap.\n    {{ inputMessage }}\n    {{ ctx.output_format }}\n\n  \"#\n}\n\n// Test the function with a sample response. Open the VSCode playground to run this.\ntest validateResponse {\n    functions [ValidateResponse]\n    args {\n        inputMessage {\n            system_message #\"You are a helpful assistant that is a part of a network of workers tasked with answering user questions about a data management platform called NExtSEEK.\"#\n            user_query #\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#\n            aggredatedMessages [#\"Can you tell me more about the sample with UID PAV-220630FLY-1031?\"#, #\"Summary: The sample with UID 'PAV-220630FLY-1031' is named '29518-190327' and is associated with the scientist JoAnne Flynn. It is categorized as a 'Scan' type sample and is linked to the protocol 'P.FLY-231011-V1_Patient-Visit-CD8.docx'. The sample was created on March 27, 2019, and is part of the Flynn Lab. Additional notes mention 'P0099'. The sample is a child of 'NHP-220630FLY-2'. More details can be found at the provided URI.\"#, #\"Here are the details for the sample with UID PAV-220630FLY-1031:\\n\\n- **Name**: 29518-190327\\n- **Notes**: P0099\\n- **Scientist**: JoAnne Flynn\\n- **Protocol**: [P.FLY-231011-V1_Patient-Visit-CD8.docx](https://nextseek.mit.edu/seek/sop/uid=P.FLY-231011-V1_Patient-Visit-CD8.docx)\\n- **Publish URI**: [Sample Link](https://fairdomhub.org/samples/23142)\\n- **Sample URL**: [Sample Details](https://nextseek.mit.edu/seek/sampletree/uid=PAV-220630FLY-1031)\"#]\n            resource {\n                sample_metadata [\n                    {\n                        UID \"PAV-220630FLY-1031\"\n                        Name \"29518-190327\"\n                        Scientist \"JoAnne Flynn\"\n                    }\n                ],\n                protocolUrl \"https://nextseek.mit.edu/seek/sop/uid=P.FLY-231011-V1_Patient-Visit-CD8.docx\"\n                sampleUrl \"https://nextseek.mit.edu/seek/sampletree/uid=PAV-220630FLY-1031\"\n            }\n        }\n    }\n}",
}

def get_baml_files():
    return file_map